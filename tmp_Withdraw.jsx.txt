import { useState } from "react";

export default function WithdrawPage() {
  const host = import.meta.env.VITE_HOST;
  const [requisition, setRequisition] = useState({
    requisition_by: "",
    remarks: "",
  });

  const [items, setItems] = useState([
    { id: Date.now(), material_id: "", name: "", qty_req: 1, qty_issued: 0, remarks: "" },
  ]);

  const handleItemChange = (id, field, value) => {
    setItems(prev => prev.map(item => {
      if (item.id !== id) return item;
      const next = { ...item };

      if (field === "qty_req") {
        const v = Math.max(0, parseFloat(value ?? 0) || 0);
        next.qty_req = v;
        // ???????????????????
        if ((parseFloat(next.qty_issued) || 0) > v) next.qty_issued = v;
      } else if (field === "qty_issued") {
        const v = Math.max(0, parseFloat(value ?? 0) || 0);
        next.qty_issued = Math.min(v, parseFloat(next.qty_req) || 0);
      } else {
        next[field] = value;
      }
      return next;
    }));
  };


  const addItem = () => {
    setItems([...items, { id: Date.now(), material_id: "", name: "", qty_req: 1, qty_issued: 0, remarks: "" }]);
  };

  const handleSubmit = async () => {
  if (!requisition.requisition_by.trim()) {
    alert("????????????????????");
    return;
  }
  if (items.length === 0) {
    alert("????????????????????? 1 ??????");
    return;
  }
  const bad = items.find(it =>
    (!String(it.material_id).trim() && !String(it.name).trim()) ||
    (parseFloat(it.qty_req) || 0) <= 0 ||
    (parseFloat(it.qty_issued) || 0) > (parseFloat(it.qty_req) || 0)
  );
  if (bad) {
    alert("??????????????????????/?????????? (????/????, ?????, ????????????????????)");
    return;
  }

  const data = {
    requisition: {
      requisition_by: requisition.requisition_by.trim(),
      remarks: requisition.remarks.trim()
    },
    items: items.map(({ id, ...row }) => ({
      ...row,
      qty_req: parseFloat(row.qty_req) || 0,
      qty_issued: parseFloat(row.qty_issued) || 0
    }))
  };

  try {
    const res = await fetch(`${host}/api/requisition`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify(data),
    });
    const result = await res.json();
    if (result.success) {
      alert("? ??????????????????! ??????: " + result.requisitionId);
      setRequisition({ requisition_by: "", remarks: "" });
      setItems([{ id: crypto?.randomUUID?.() || Date.now(), material_id: "", name: "", qty_req: 1, qty_issued: 0, remarks: "" }]);
    } else {
      alert("? ???????????????: " + result.error);
    }
  } catch (err) {
    console.error("Error:", err);
    alert("???????????????????????????????????????");
  }
};

  return (
    <div className="min-h-screen bg-gray-50 p-6 flex justify-center">
      <div className="w-full max-w-4xl bg-white shadow-xl rounded-2xl p-8">

        {/* Requisition Info */}
        <h2 className="text-xl font-bold mb-2">???????????</h2>
        <input
          className="border p-2 mb-2 w-full"
          placeholder="???????"
          value={requisition.requisition_by}
          onChange={e => setRequisition({ ...requisition, requisition_by: e.target.value })}
        />
        <textarea
          className="border p-2 mb-4 w-full"
          placeholder="????????"
          value={requisition.remarks}
          onChange={e => setRequisition({ ...requisition, remarks: e.target.value })}
        />

        {/* Items */}
        <h2 className="text-xl font-bold mb-2">???????????</h2>
        <table className="w-full border-collapse border text-sm mb-4">
          <thead>
            <tr className="bg-gray-100">
              <th className="border px-2 py-1">?????????</th>
              <th className="border px-2 py-1">?????????</th>
              <th className="border px-2 py-1">??????????</th>
              <th className="border px-2 py-1">????????????</th>
              <th className="border px-2 py-1">????????</th>
            </tr>
          </thead>
          <tbody>
            {items.map((item) => (
              <tr key={item.id}>
                <td className="border px-2 py-1">
                  <input
                    className="w-20 border px-1"
                    value={item.material_id}
                    onChange={e => handleItemChange(item.id, "material_id", e.target.value)}
                  />
                </td>
                <td className="border px-2 py-1">
                  <input
                    className="w-full border px-1"
                    value={item.name}
                    onChange={e => handleItemChange(item.id, "name", e.target.value)}
                  />
                </td>
                <td className="border px-2 py-1">
                  <input
                    type="number"
                    className="w-20 border px-1 text-center"
                    value={item.qty_req}
                    onChange={e => handleItemChange(item.id, "qty_req", parseInt(e.target.value))}
                  />
                </td>
                <td className="border px-2 py-1">
                  <input
                    type="number"
                    className="w-20 border px-1 text-center"
                    min={0}
                    step="0.01"
                    value={item.qty_issued}
                    onChange={e => handleItemChange(item.id, "qty_issued", e.target.value)}
                  />
                </td>
                <td className="border px-2 py-1">
                  <input
                    className="w-full border px-1"
                    placeholder="????????"
                    value={item.remarks}
                    onChange={e => handleItemChange(item.id, "remarks", e.target.value)}
                  />
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        <button
          className="bg-green-500 text-white px-4 py-2 rounded"
          onClick={addItem}
        >
          + ???????????
        </button>

        {/* Submit */}
        <div className="text-right mt-6">
          <button
            className="bg-blue-600 text-white px-6 py-2 rounded-lg"
            onClick={handleSubmit}
          >
            ????????????
          </button>
        </div>
      </div>
    </div>
  );
}